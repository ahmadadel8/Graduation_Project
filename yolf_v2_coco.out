2020-08-05 18:38:17.651360: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
2020-08-05 18:38:22.537255: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1432] Found device 0 with properties: 
name: Tesla K80 major: 3 minor: 7 memoryClockRate(GHz): 0.8235
pciBusID: 0000:06:00.0
totalMemory: 11.17GiB freeMemory: 11.11GiB
2020-08-05 18:38:22.537368: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1511] Adding visible gpu devices: 0
2020-08-05 18:38:22.866463: I tensorflow/core/common_runtime/gpu/gpu_device.cc:982] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-08-05 18:38:22.866596: I tensorflow/core/common_runtime/gpu/gpu_device.cc:988]      0 
2020-08-05 18:38:22.866619: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1001] 0:   N 
2020-08-05 18:38:22.866735: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1115] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 10761 MB memory) -> physical GPU (device: 0, name: Tesla K80, pci bus id: 0000:06:00.0, compute capability: 3.7)
  0%|          | 0/233 [00:00<?, ?it/s]loading annotations into memory...
Done (t=16.62s)
creating index...
index created!
2020-08-05 18:39:46.109185: W tensorflow/core/common_runtime/bfc_allocator.cc:211] Allocator (GPU_0_bfc) ran out of memory trying to allocate 2.95GiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory were available.
2020-08-05 18:39:46.212326: W tensorflow/core/common_runtime/bfc_allocator.cc:211] Allocator (GPU_0_bfc) ran out of memory trying to allocate 2.36GiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory were available.
2020-08-05 18:39:46.306763: W tensorflow/core/common_runtime/bfc_allocator.cc:211] Allocator (GPU_0_bfc) ran out of memory trying to allocate 1.04GiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory were available.
2020-08-05 18:39:46.353132: W tensorflow/core/common_runtime/bfc_allocator.cc:211] Allocator (GPU_0_bfc) ran out of memory trying to allocate 1002.73MiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory were available.
2020-08-05 18:39:46.390488: W tensorflow/core/common_runtime/bfc_allocator.cc:211] Allocator (GPU_0_bfc) ran out of memory trying to allocate 969.40MiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory were available.
2020-08-05 18:39:46.462400: W tensorflow/core/common_runtime/bfc_allocator.cc:211] Allocator (GPU_0_bfc) ran out of memory trying to allocate 2.92GiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory were available.
2020-08-05 18:39:46.555674: W tensorflow/core/common_runtime/bfc_allocator.cc:211] Allocator (GPU_0_bfc) ran out of memory trying to allocate 2.84GiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory were available.
2020-08-05 18:39:46.635896: W tensorflow/core/common_runtime/bfc_allocator.cc:211] Allocator (GPU_0_bfc) ran out of memory trying to allocate 2.36GiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory were available.
2020-08-05 18:39:46.710167: W tensorflow/core/common_runtime/bfc_allocator.cc:211] Allocator (GPU_0_bfc) ran out of memory trying to allocate 2.28GiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory were available.
/lfs01/workdirs/alex054u3/nutshell/data_aug/bbox_util.py:83: RuntimeWarning: invalid value encountered in true_divide
  delta_area = ((ar_ - bbox_area(bbox))/ar_)
/lfs01/workdirs/alex054u3/nutshell/data_aug/bbox_util.py:85: RuntimeWarning: invalid value encountered in less
  mask = (delta_area < (1 - alpha)).astype(int)
sqrt err 
  [47.42104388710194, 427, 41.66543091335369, 427.0, 0.0]
sqrt err 
  [47.42104388710194, 427, 30.144906721957746, 427.0, 0.0]
